{"file":"/root/aaa/backend/main.go:153","func":"main.initLogger","level":"info","msg":"日志系统初始化完成","time":"2025-03-13 09:44:09"}
{"file":"/root/aaa/backend/main.go:154","func":"main.initLogger","level":"info","msg":"日志文件路径: logs/multi-cloud-landing-zone-2025-03-13.log","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] 日志系统初始化成功，日志文件: logs/multi-cloud-landing-zone-2025-03-13.log
{"file":"/root/aaa/backend/main.go:200","func":"main.main","level":"info","msg":"新日志系统初始化成功","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] 新日志系统初始化成功，与原有日志系统集成
{"file":"/root/aaa/backend/main.go:209","func":"main.main","level":"info","msg":"环境变量加载成功","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] 环境变量加载成功
2025/03/13 09:44:09 [DEBUG] 环境变量配置: GIN_MODE=release, PORT=3000, LOG_LEVEL=debug
{"file":"/root/aaa/backend/main.go:230","func":"main.main","level":"info","msg":"Gin运行在Release模式","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] Gin运行在Release模式
{"file":"/root/aaa/backend/main.go:243","func":"main.main","level":"info","msg":"Gin日志文件路径: logs/gin-2025-03-13.log","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] Gin日志文件路径: logs/gin-2025-03-13.log
{"file":"/root/aaa/backend/main.go:260","func":"main.main","level":"info","msg":"Gin路由初始化完成","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] Gin路由初始化完成
{"file":"/root/aaa/backend/main.go:301","func":"main.main","level":"info","msg":"CORS配置完成 - 使用增强的自定义中间件，允许所有来源并支持凭证","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] CORS配置完成 - 使用增强的自定义中间件，允许所有来源并支持凭证
{"file":"/root/aaa/backend/main.go:306","func":"main.main","level":"info","msg":"API路由注册完成","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] API路由注册完成
{"file":"/root/aaa/backend/main.go:316","func":"main.main","level":"info","msg":"使用配置端口: 3000","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] 使用配置端口: 3000
{"file":"/root/aaa/backend/main.go:321","func":"main.main","level":"info","msg":"服务器启动在 http://0.0.0.0:3000 (可通过 http://10.168.0.5:3000 访问)","time":"2025-03-13 09:44:09"}
2025/03/13 09:44:09 [INFO] 服务器启动在 http://0.0.0.0:3000 (可通过 http://10.168.0.5:3000 访问)
{"file":"/root/aaa/backend/main.go:153","func":"main.initLogger","level":"info","msg":"日志系统初始化完成","time":"2025-03-13 15:43:59"}
{"file":"/root/aaa/backend/main.go:154","func":"main.initLogger","level":"info","msg":"日志文件路径: logs/multi-cloud-landing-zone-2025-03-13.log","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] 日志系统初始化成功，日志文件: logs/multi-cloud-landing-zone-2025-03-13.log
{"file":"/root/aaa/backend/main.go:200","func":"main.main","level":"info","msg":"新日志系统初始化成功","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] 新日志系统初始化成功，与原有日志系统集成
{"file":"/root/aaa/backend/main.go:209","func":"main.main","level":"info","msg":"环境变量加载成功","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] 环境变量加载成功
2025/03/13 15:43:59 [DEBUG] 环境变量配置: GIN_MODE=release, PORT=3000, LOG_LEVEL=debug
{"file":"/root/aaa/backend/main.go:230","func":"main.main","level":"info","msg":"Gin运行在Release模式","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] Gin运行在Release模式
{"file":"/root/aaa/backend/main.go:243","func":"main.main","level":"info","msg":"Gin日志文件路径: logs/gin-2025-03-13.log","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] Gin日志文件路径: logs/gin-2025-03-13.log
{"file":"/root/aaa/backend/main.go:263","func":"main.main","level":"info","msg":"Gin路由初始化完成","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] Gin路由初始化完成
{"file":"/root/aaa/backend/main.go:309","func":"main.main","level":"info","msg":"CORS配置完成 - 使用增强的自定义中间件，支持动态Origin和凭证","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] CORS配置完成 - 使用增强的自定义中间件，支持动态Origin和凭证
{"file":"/root/aaa/backend/main.go:314","func":"main.main","level":"info","msg":"API路由设置完成","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] API路由设置完成
{"file":"/root/aaa/backend/main.go:325","func":"main.main","level":"info","msg":"服务器启动，监听地址: 0.0.0.0:3000","time":"2025-03-13 15:43:59"}
2025/03/13 15:43:59 [INFO] 服务器启动，监听地址: 0.0.0.0:3000
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 15:44:19","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["914"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 15:44:19"}
2025/03/13 15:44:19 [INFO] 收到新的部署请求
2025/03/13 15:44:19 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-north-1","az":"可用区C","vpc":{"name":"AWS-VPC-cn-north-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-north-1-c","cidr":"10.0.0.0/24","az":"cn-north-1-c","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-north-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-north-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-north-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-north-1-c\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-north-1-c\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-north-1-c\"\n  }\n}\n\n"}
2025/03/13 15:44:19 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区C",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-c",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 15:44:19 [INFO] 开始异步处理部署，部署ID: 1741851859
2025/03/13 15:44:19 [INFO] 已返回部署开始响应，部署ID: 1741851859
2025/03/13 15:44:19 [INFO] 开始处理部署 ID: 1741851859
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 15:44:19"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":445235,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 15:44:19"}
2025/03/13 15:44:19 [INFO] 创建部署工作目录: terraform/deployments/1741851859
2025/03/13 15:44:19 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 15:44:19 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区C",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-c",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 15:44:19 [INFO] 已生成云提供商配置: aws, 区域: cn-north-1
2025/03/13 15:44:19 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-north-1, CIDR=10.0.0.0/16
2025/03/13 15:44:19 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-north-1-c, CIDR=10.0.0.0/24, 可用区=可用区C
2025/03/13 15:44:19 [INFO] Terraform配置生成完成
2025/03/13 15:44:19 [INFO] 正在保存Terraform配置到文件: terraform/deployments/1741851859/main.tf
2025/03/13 15:44:19 [INFO] Terraform配置已成功保存到: terraform/deployments/1741851859/main.tf
2025/03/13 15:44:19 [DEBUG] Terraform配置文件内容:
provider "aws" {
  region = "cn-north-1"
}

resource "aws_vpc" "AWS-VPC-cn-north-1" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  
  tags = {
    Name = "AWS-VPC-cn-north-1"
  }
}

resource "aws_subnet" "AWS-Subnet-cn-north-1-c" {
  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id
  cidr_block              = "10.0.0.0/24"
  availability_zone       = "可用区C"
  map_public_ip_on_launch = true
  
  tags = {
    Name = "AWS-Subnet-cn-north-1-c"
  }
}

2025/03/13 15:44:19 [INFO] Terraform配置文件已保存到: terraform/deployments/1741851859/main.tf
2025/03/13 15:44:19 [INFO] 开始初始化Terraform
2025/03/13 15:45:31 [INFO] Terraform初始化完成，输出:
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
- Installed hashicorp/aws v5.90.1 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2025/03/13 15:45:31 [INFO] 开始验证Terraform配置
2025/03/13 15:45:33 [INFO] Terraform配置验证通过，输出:
[32m[1mSuccess![0m The configuration is valid.
[0m
2025/03/13 15:45:33 [INFO] 开始生成Terraform执行计划
2025/03/13 15:45:40 [ERROR] Terraform计划生成失败: exit status 1, 输出: 
[0m[1m[31mPlanning failed.[0m[1m Terraform encountered an error while generating this plan.[0m

[0m[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mNo valid credential sources found[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with provider["registry.terraform.io/hashicorp/aws"],
[31m│[0m [0m  on main.tf line 1, in provider "aws":
[31m│[0m [0m   1: provider "aws" [4m{[0m[0m
[31m│[0m [0m
[31m│[0m [0mPlease see https://registry.terraform.io/providers/hashicorp/aws
[31m│[0m [0mfor more information about providing credentials.
[31m│[0m [0m
[31m│[0m [0mError: failed to refresh cached credentials, no EC2 IMDS role found,
[31m│[0m [0moperation error ec2imds: GetMetadata, request canceled, context deadline
[31m│[0m [0mexceeded
[31m│[0m [0m
[31m╵[0m[0m
2025/03/13 15:45:40 [ERROR] 部署操作失败: Terraform计划生成失败: exit status 1, 输出: 
[0m[1m[31mPlanning failed.[0m[1m Terraform encountered an error while generating this plan.[0m

[0m[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mNo valid credential sources found[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with provider["registry.terraform.io/hashicorp/aws"],
[31m│[0m [0m  on main.tf line 1, in provider "aws":
[31m│[0m [0m   1: provider "aws" [4m{[0m[0m
[31m│[0m [0m
[31m│[0m [0mPlease see https://registry.terraform.io/providers/hashicorp/aws
[31m│[0m [0mfor more information about providing credentials.
[31m│[0m [0m
[31m│[0m [0mError: failed to refresh cached credentials, no EC2 IMDS role found,
[31m│[0m [0moperation error ec2imds: GetMetadata, request canceled, context deadline
[31m│[0m [0mexceeded
[31m│[0m [0m
[31m╵[0m[0m
2025/03/13 15:45:40 [ERROR] 部署过程崩溃: Terraform计划生成失败: exit status 1, 输出: 
[0m[1m[31mPlanning failed.[0m[1m Terraform encountered an error while generating this plan.[0m

[0m[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mNo valid credential sources found[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with provider["registry.terraform.io/hashicorp/aws"],
[31m│[0m [0m  on main.tf line 1, in provider "aws":
[31m│[0m [0m   1: provider "aws" [4m{[0m[0m
[31m│[0m [0m
[31m│[0m [0mPlease see https://registry.terraform.io/providers/hashicorp/aws
[31m│[0m [0mfor more information about providing credentials.
[31m│[0m [0m
[31m│[0m [0mError: failed to refresh cached credentials, no EC2 IMDS role found,
[31m│[0m [0moperation error ec2imds: GetMetadata, request canceled, context deadline
[31m│[0m [0mexceeded
[31m│[0m [0m
[31m╵[0m[0m
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 15:53:04","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["914"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 15:53:04"}
2025/03/13 15:53:04 [INFO] 收到新的部署请求
2025/03/13 15:53:04 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-north-1","az":"可用区C","vpc":{"name":"AWS-VPC-cn-north-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-north-1-c","cidr":"10.0.0.0/24","az":"cn-north-1-c","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-north-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-north-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-north-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-north-1-c\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-north-1-c\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-north-1-c\"\n  }\n}\n\n"}
2025/03/13 15:53:04 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区C",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-c",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 15:53:04 [INFO] 开始异步处理部署，部署ID: 1741852384
2025/03/13 15:53:04 [INFO] 已返回部署开始响应，部署ID: 1741852384
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 15:53:04"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":295274,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 15:53:04"}
2025/03/13 15:53:04 [INFO] 开始处理部署 ID: 1741852384
2025/03/13 15:53:04 [INFO] 创建部署工作目录: terraform/deployments/1741852384
2025/03/13 15:53:04 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 15:53:04 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区C",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-c",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 15:53:04 [INFO] 已生成云提供商配置: aws, 区域: cn-north-1
2025/03/13 15:53:04 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-north-1, CIDR=10.0.0.0/16
2025/03/13 15:53:04 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-north-1-c, CIDR=10.0.0.0/24, 可用区=可用区C
2025/03/13 15:53:04 [INFO] Terraform配置生成完成
2025/03/13 15:53:04 [INFO] 正在保存Terraform配置到文件: terraform/deployments/1741852384/main.tf
2025/03/13 15:53:04 [INFO] Terraform配置已成功保存到: terraform/deployments/1741852384/main.tf
2025/03/13 15:53:04 [DEBUG] Terraform配置文件内容:
provider "aws" {
  region = "cn-north-1"
}

resource "aws_vpc" "AWS-VPC-cn-north-1" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  
  tags = {
    Name = "AWS-VPC-cn-north-1"
  }
}

resource "aws_subnet" "AWS-Subnet-cn-north-1-c" {
  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id
  cidr_block              = "10.0.0.0/24"
  availability_zone       = "可用区C"
  map_public_ip_on_launch = true
  
  tags = {
    Name = "AWS-Subnet-cn-north-1-c"
  }
}

2025/03/13 15:53:04 [INFO] Terraform配置文件已保存到: terraform/deployments/1741852384/main.tf
2025/03/13 15:53:04 [INFO] 开始初始化Terraform
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 15:58:44","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["914"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 15:58:44"}
2025/03/13 15:58:44 [INFO] 收到新的部署请求
2025/03/13 15:58:44 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-north-1","az":"可用区C","vpc":{"name":"AWS-VPC-cn-north-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-north-1-c","cidr":"10.0.0.0/24","az":"cn-north-1-c","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-north-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-north-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-north-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-north-1-c\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-north-1-c\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-north-1-c\"\n  }\n}\n\n"}
2025/03/13 15:58:44 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区C",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-c",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 15:58:44 [INFO] 开始异步处理部署，部署ID: 1741852724
2025/03/13 15:58:44 [INFO] 已返回部署开始响应，部署ID: 1741852724
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 15:58:44"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":291544,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 15:58:44"}
2025/03/13 15:58:44 [INFO] 开始处理部署 ID: 1741852724
2025/03/13 15:58:44 [INFO] 创建部署工作目录: terraform/deployments/1741852724
2025/03/13 15:58:44 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 15:58:44 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区C",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-c",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 15:58:44 [INFO] 已生成云提供商配置: aws, 区域: cn-north-1
2025/03/13 15:58:44 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-north-1, CIDR=10.0.0.0/16
2025/03/13 15:58:44 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-north-1-c, CIDR=10.0.0.0/24, 可用区=可用区C
2025/03/13 15:58:44 [INFO] Terraform配置生成完成
2025/03/13 15:58:44 [INFO] 正在保存Terraform配置到文件: terraform/deployments/1741852724/main.tf
2025/03/13 15:58:44 [INFO] Terraform配置已成功保存到: terraform/deployments/1741852724/main.tf
2025/03/13 15:58:44 [DEBUG] Terraform配置文件内容:
provider "aws" {
  region = "cn-north-1"
}

resource "aws_vpc" "AWS-VPC-cn-north-1" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  
  tags = {
    Name = "AWS-VPC-cn-north-1"
  }
}

resource "aws_subnet" "AWS-Subnet-cn-north-1-c" {
  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id
  cidr_block              = "10.0.0.0/24"
  availability_zone       = "可用区C"
  map_public_ip_on_launch = true
  
  tags = {
    Name = "AWS-Subnet-cn-north-1-c"
  }
}

2025/03/13 15:58:44 [INFO] Terraform配置文件已保存到: terraform/deployments/1741852724/main.tf
2025/03/13 15:58:44 [INFO] 开始初始化Terraform
2025/03/13 15:59:54 [INFO] Terraform初始化完成，输出:
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
- Installed hashicorp/aws v5.90.1 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2025/03/13 15:59:54 [INFO] 开始验证Terraform配置
2025/03/13 15:59:56 [INFO] Terraform配置验证通过，输出:
[32m[1mSuccess![0m The configuration is valid.
[0m
2025/03/13 15:59:56 [INFO] 开始生成Terraform执行计划
2025/03/13 15:59:59 [INFO] Terraform执行计划生成完成，输出:

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_subnet.AWS-Subnet-cn-north-1-c[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "AWS-Subnet-cn-north-1-c" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "可用区C"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-c"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-c"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.AWS-VPC-cn-north-1[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "AWS-VPC-cn-north-1" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
2025/03/13 15:59:59 [INFO] 开始执行Terraform部署
2025/03/13 16:00:13 [ERROR] Terraform部署失败: exit status 1, 输出: [0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 11s [id=vpc-0a24df6e14a9117cf][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-c: Creating...[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating EC2 Subnet: operation error EC2: CreateSubnet, https response error StatusCode: 400, RequestID: e6df809a-ee56-43d5-a71d-d449817e7ece, api error InvalidParameterValue: Value (可用区C) for parameter availabilityZone is invalid. Subnets can currently only be created in the following availability zones: cn-north-1-pkx-1a, cn-north-1a, cn-north-1b, cn-north-1d.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_subnet.AWS-Subnet-cn-north-1-c,
[31m│[0m [0m  on main.tf line 15, in resource "aws_subnet" "AWS-Subnet-cn-north-1-c":
[31m│[0m [0m  15: resource "aws_subnet" "AWS-Subnet-cn-north-1-c" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
2025/03/13 16:00:13 [ERROR] 部署操作失败: Terraform部署失败: exit status 1, 输出: [0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 11s [id=vpc-0a24df6e14a9117cf][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-c: Creating...[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating EC2 Subnet: operation error EC2: CreateSubnet, https response error StatusCode: 400, RequestID: e6df809a-ee56-43d5-a71d-d449817e7ece, api error InvalidParameterValue: Value (可用区C) for parameter availabilityZone is invalid. Subnets can currently only be created in the following availability zones: cn-north-1-pkx-1a, cn-north-1a, cn-north-1b, cn-north-1d.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_subnet.AWS-Subnet-cn-north-1-c,
[31m│[0m [0m  on main.tf line 15, in resource "aws_subnet" "AWS-Subnet-cn-north-1-c":
[31m│[0m [0m  15: resource "aws_subnet" "AWS-Subnet-cn-north-1-c" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
2025/03/13 16:00:13 [ERROR] 部署过程崩溃: Terraform部署失败: exit status 1, 输出: [0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 11s [id=vpc-0a24df6e14a9117cf][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-c: Creating...[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating EC2 Subnet: operation error EC2: CreateSubnet, https response error StatusCode: 400, RequestID: e6df809a-ee56-43d5-a71d-d449817e7ece, api error InvalidParameterValue: Value (可用区C) for parameter availabilityZone is invalid. Subnets can currently only be created in the following availability zones: cn-north-1-pkx-1a, cn-north-1a, cn-north-1b, cn-north-1d.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_subnet.AWS-Subnet-cn-north-1-c,
[31m│[0m [0m  on main.tf line 15, in resource "aws_subnet" "AWS-Subnet-cn-north-1-c":
[31m│[0m [0m  15: resource "aws_subnet" "AWS-Subnet-cn-north-1-c" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 16:00:42","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["914"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 16:00:42"}
2025/03/13 16:00:42 [INFO] 收到新的部署请求
2025/03/13 16:00:42 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-north-1","az":"可用区A","vpc":{"name":"AWS-VPC-cn-north-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-north-1-a","cidr":"10.0.0.0/24","az":"cn-north-1-a","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-north-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-north-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-north-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-north-1-a\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-north-1-a\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-north-1-a\"\n  }\n}\n\n"}
2025/03/13 16:00:42 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区A",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-a",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 16:00:42 [INFO] 开始异步处理部署，部署ID: 1741852842
2025/03/13 16:00:42 [INFO] 已返回部署开始响应，部署ID: 1741852842
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 16:00:42"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":286554,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 16:00:42"}
2025/03/13 16:00:42 [INFO] 开始处理部署 ID: 1741852842
2025/03/13 16:00:42 [INFO] 创建部署工作目录: terraform/deployments/1741852842
2025/03/13 16:00:42 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 16:00:42 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区A",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-a",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 16:00:42 [INFO] 已生成云提供商配置: aws, 区域: cn-north-1
2025/03/13 16:00:42 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-north-1, CIDR=10.0.0.0/16
2025/03/13 16:00:42 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-north-1-a, CIDR=10.0.0.0/24, 可用区=可用区A
2025/03/13 16:00:42 [INFO] Terraform配置生成完成
2025/03/13 16:00:42 [INFO] 正在保存Terraform配置到文件: terraform/deployments/1741852842/main.tf
2025/03/13 16:00:42 [INFO] Terraform配置已成功保存到: terraform/deployments/1741852842/main.tf
2025/03/13 16:00:42 [DEBUG] Terraform配置文件内容:
provider "aws" {
  region = "cn-north-1"
}

resource "aws_vpc" "AWS-VPC-cn-north-1" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  
  tags = {
    Name = "AWS-VPC-cn-north-1"
  }
}

resource "aws_subnet" "AWS-Subnet-cn-north-1-a" {
  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id
  cidr_block              = "10.0.0.0/24"
  availability_zone       = "可用区A"
  map_public_ip_on_launch = true
  
  tags = {
    Name = "AWS-Subnet-cn-north-1-a"
  }
}

2025/03/13 16:00:42 [INFO] Terraform配置文件已保存到: terraform/deployments/1741852842/main.tf
2025/03/13 16:00:42 [INFO] 开始初始化Terraform
2025/03/13 16:01:57 [INFO] Terraform初始化完成，输出:
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
- Installed hashicorp/aws v5.90.1 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2025/03/13 16:01:57 [INFO] 开始验证Terraform配置
2025/03/13 16:01:59 [INFO] Terraform配置验证通过，输出:
[32m[1mSuccess![0m The configuration is valid.
[0m
2025/03/13 16:01:59 [INFO] 开始生成Terraform执行计划
2025/03/13 16:02:02 [INFO] Terraform执行计划生成完成，输出:

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_subnet.AWS-Subnet-cn-north-1-a[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "AWS-Subnet-cn-north-1-a" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "可用区A"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-a"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-a"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.AWS-VPC-cn-north-1[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "AWS-VPC-cn-north-1" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
2025/03/13 16:02:02 [INFO] 开始执行Terraform部署
2025/03/13 16:02:16 [ERROR] Terraform部署失败: exit status 1, 输出: [0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 11s [id=vpc-0c7357e254b22399c][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-a: Creating...[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating EC2 Subnet: operation error EC2: CreateSubnet, https response error StatusCode: 400, RequestID: 5318fbbc-593d-42da-bebd-a5de34575c6b, api error InvalidParameterValue: Value (可用区A) for parameter availabilityZone is invalid. Subnets can currently only be created in the following availability zones: cn-north-1-pkx-1a, cn-north-1a, cn-north-1b, cn-north-1d.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_subnet.AWS-Subnet-cn-north-1-a,
[31m│[0m [0m  on main.tf line 15, in resource "aws_subnet" "AWS-Subnet-cn-north-1-a":
[31m│[0m [0m  15: resource "aws_subnet" "AWS-Subnet-cn-north-1-a" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
2025/03/13 16:02:16 [ERROR] 部署操作失败: Terraform部署失败: exit status 1, 输出: [0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 11s [id=vpc-0c7357e254b22399c][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-a: Creating...[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating EC2 Subnet: operation error EC2: CreateSubnet, https response error StatusCode: 400, RequestID: 5318fbbc-593d-42da-bebd-a5de34575c6b, api error InvalidParameterValue: Value (可用区A) for parameter availabilityZone is invalid. Subnets can currently only be created in the following availability zones: cn-north-1-pkx-1a, cn-north-1a, cn-north-1b, cn-north-1d.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_subnet.AWS-Subnet-cn-north-1-a,
[31m│[0m [0m  on main.tf line 15, in resource "aws_subnet" "AWS-Subnet-cn-north-1-a":
[31m│[0m [0m  15: resource "aws_subnet" "AWS-Subnet-cn-north-1-a" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
2025/03/13 16:02:16 [ERROR] 部署过程崩溃: Terraform部署失败: exit status 1, 输出: [0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 11s [id=vpc-0c7357e254b22399c][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-a: Creating...[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating EC2 Subnet: operation error EC2: CreateSubnet, https response error StatusCode: 400, RequestID: 5318fbbc-593d-42da-bebd-a5de34575c6b, api error InvalidParameterValue: Value (可用区A) for parameter availabilityZone is invalid. Subnets can currently only be created in the following availability zones: cn-north-1-pkx-1a, cn-north-1a, cn-north-1b, cn-north-1d.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_subnet.AWS-Subnet-cn-north-1-a,
[31m│[0m [0m  on main.tf line 15, in resource "aws_subnet" "AWS-Subnet-cn-north-1-a":
[31m│[0m [0m  15: resource "aws_subnet" "AWS-Subnet-cn-north-1-a" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
{"file":"/root/aaa/backend/main.go:153","func":"main.initLogger","level":"info","msg":"日志系统初始化完成","time":"2025-03-13 16:16:55"}
{"file":"/root/aaa/backend/main.go:154","func":"main.initLogger","level":"info","msg":"日志文件路径: logs/multi-cloud-landing-zone-2025-03-13.log","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] 日志系统初始化成功，日志文件: logs/multi-cloud-landing-zone-2025-03-13.log
{"file":"/root/aaa/backend/main.go:200","func":"main.main","level":"info","msg":"新日志系统初始化成功","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] 新日志系统初始化成功，与原有日志系统集成
{"file":"/root/aaa/backend/main.go:209","func":"main.main","level":"info","msg":"环境变量加载成功","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] 环境变量加载成功
2025/03/13 16:16:55 [DEBUG] 环境变量配置: GIN_MODE=release, PORT=3000, LOG_LEVEL=debug
{"file":"/root/aaa/backend/main.go:230","func":"main.main","level":"info","msg":"Gin运行在Release模式","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] Gin运行在Release模式
{"file":"/root/aaa/backend/main.go:243","func":"main.main","level":"info","msg":"Gin日志文件路径: logs/gin-2025-03-13.log","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] Gin日志文件路径: logs/gin-2025-03-13.log
{"file":"/root/aaa/backend/main.go:263","func":"main.main","level":"info","msg":"Gin路由初始化完成","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] Gin路由初始化完成
{"file":"/root/aaa/backend/main.go:309","func":"main.main","level":"info","msg":"CORS配置完成 - 使用增强的自定义中间件，支持动态Origin和凭证","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] CORS配置完成 - 使用增强的自定义中间件，支持动态Origin和凭证
{"file":"/root/aaa/backend/main.go:314","func":"main.main","level":"info","msg":"API路由设置完成","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] API路由设置完成
{"file":"/root/aaa/backend/main.go:325","func":"main.main","level":"info","msg":"服务器启动，监听地址: 0.0.0.0:3000","time":"2025-03-13 16:16:55"}
2025/03/13 16:16:55 [INFO] 服务器启动，监听地址: 0.0.0.0:3000
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 16:17:16","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["914"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 16:17:16"}
2025/03/13 16:17:16 [INFO] 收到新的部署请求
2025/03/13 16:17:16 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-north-1","az":"可用区A","vpc":{"name":"AWS-VPC-cn-north-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-north-1-a","cidr":"10.0.0.0/24","az":"cn-north-1-a","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-north-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-north-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-north-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-north-1-a\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-north-1-a\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-north-1-a\"\n  }\n}\n\n"}
2025/03/13 16:17:16 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区A",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-a",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 16:17:16 [INFO] 开始异步处理部署，部署ID: 1741853836
2025/03/13 16:17:16 [INFO] 已返回部署开始响应，部署ID: 1741853836
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 16:17:16"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":642201,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 16:17:16"}
2025/03/13 16:17:16 [INFO] 开始处理部署 ID: 1741853836
2025/03/13 16:17:16 [INFO] 创建部署工作目录: terraform/deployments/1741853836
2025/03/13 16:17:16 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 16:17:16 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区A",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-a",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 16:17:16 [INFO] 已生成云提供商配置: aws, 区域: cn-north-1
2025/03/13 16:17:16 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-north-1, CIDR=10.0.0.0/16
2025/03/13 16:17:16 [INFO] 将可用区显示名称 '可用区A' 映射到实际AWS可用区ID 'cn-north-1a'
2025/03/13 16:17:16 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-north-1-a, CIDR=10.0.0.0/24, 可用区=可用区A
2025/03/13 16:17:16 [INFO] Terraform配置已保存到: terraform/deployments/1741853836/main.tf
2025/03/13 16:17:16 [INFO] Terraform配置文件已保存到: terraform/deployments/1741853836/main.tf
2025/03/13 16:17:16 [INFO] 开始初始化Terraform
2025/03/13 16:18:30 [INFO] Terraform初始化完成，输出:
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
- Installed hashicorp/aws v5.90.1 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2025/03/13 16:18:30 [INFO] 开始验证Terraform配置
2025/03/13 16:18:33 [INFO] Terraform配置验证通过，输出:
[32m[1mSuccess![0m The configuration is valid.
[0m
2025/03/13 16:18:33 [INFO] 开始生成Terraform执行计划
2025/03/13 16:18:38 [INFO] Terraform执行计划生成完成，输出:

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_subnet.AWS-Subnet-cn-north-1-a[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "AWS-Subnet-cn-north-1-a" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "cn-north-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-a"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-a"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.AWS-VPC-cn-north-1[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "AWS-VPC-cn-north-1" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
2025/03/13 16:18:38 [INFO] 开始执行Terraform部署
2025/03/13 16:19:03 [INFO] Terraform部署执行完成，输出:
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 11s [id=vpc-08f941cd9c7a94dc8][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-a: Creating...[0m[0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-a: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-a: Creation complete after 11s [id=subnet-0e2a28f0e159f3732][0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
[0m
2025/03/13 16:19:03 [INFO] 开始生成资源拓扑图
2025/03/13 16:19:03 [INFO] 部署完成，更新最终状态
2025/03/13 16:19:03 [INFO] 部署 ID: 1741853836 已成功完成
{"client_ip":"20.163.15.34","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"GET","msg":"收到API请求","path":"/","request_id":"","time":"2025-03-13 16:28:45","user_agent":"Mozilla/5.0 zgrab/0.x"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip"],"User-Agent":["Mozilla/5.0 zgrab/0.x"]},"request_method":"GET","request_path":"/","time":"2025-03-13 16:28:45"}
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":[""],"Access-Control-Max-Age":["86400"]},"response_status":404,"time":"2025-03-13 16:28:45"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":187017,"level":"info","method":"GET","msg":"API请求完成","path":"/","status":404,"time":"2025-03-13 16:28:45"}
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 17:27:53","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["914"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 17:27:53"}
2025/03/13 17:27:53 [INFO] 收到新的部署请求
2025/03/13 17:27:53 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-north-1","az":"可用区A","vpc":{"name":"AWS-VPC-cn-north-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-north-1-a","cidr":"10.0.0.0/24","az":"cn-north-1-a","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-north-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-north-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-north-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-north-1-a\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-north-1-a\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-north-1-a\"\n  }\n}\n\n"}
2025/03/13 17:27:53 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区A",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-a",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 17:27:53 [INFO] 开始异步处理部署，部署ID: 1741858073
2025/03/13 17:27:53 [INFO] 已返回部署开始响应，部署ID: 1741858073
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 17:27:53"}
2025/03/13 17:27:53 [INFO] 开始处理部署 ID: 1741858073
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":329686,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 17:27:53"}
2025/03/13 17:27:53 [INFO] 创建部署工作目录: terraform/deployments/1741858073
2025/03/13 17:27:53 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 17:27:53 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区A",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-a",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 17:27:53 [INFO] 已生成云提供商配置: aws, 区域: cn-north-1
2025/03/13 17:27:53 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-north-1, CIDR=10.0.0.0/16
2025/03/13 17:27:53 [INFO] 将可用区显示名称 '可用区A' 映射到实际AWS可用区ID 'cn-north-1a'
2025/03/13 17:27:53 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-north-1-a, CIDR=10.0.0.0/24, 可用区=可用区A
2025/03/13 17:27:53 [INFO] Terraform配置已保存到: terraform/deployments/1741858073/main.tf
2025/03/13 17:27:53 [INFO] Terraform配置文件已保存到: terraform/deployments/1741858073/main.tf
2025/03/13 17:27:53 [INFO] 开始初始化Terraform
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 17:34:02","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["914"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 17:34:02"}
2025/03/13 17:34:02 [INFO] 收到新的部署请求
2025/03/13 17:34:02 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-north-1","az":"可用区B","vpc":{"name":"AWS-VPC-cn-north-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-north-1-b","cidr":"10.0.0.0/24","az":"cn-north-1-b","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-north-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-north-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-north-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-north-1-b\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-north-1-b\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-north-1-b\"\n  }\n}\n\n"}
2025/03/13 17:34:02 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区B",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-b",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 17:34:02 [INFO] 开始异步处理部署，部署ID: 1741858442
2025/03/13 17:34:02 [INFO] 已返回部署开始响应，部署ID: 1741858442
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 17:34:02"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":355568,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 17:34:02"}
2025/03/13 17:34:02 [INFO] 开始处理部署 ID: 1741858442
2025/03/13 17:34:02 [INFO] 创建部署工作目录: terraform/deployments/1741858442
2025/03/13 17:34:02 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 17:34:02 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区B",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-b",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 17:34:02 [INFO] 已生成云提供商配置: aws, 区域: cn-north-1
2025/03/13 17:34:02 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-north-1, CIDR=10.0.0.0/16
2025/03/13 17:34:02 [INFO] 将可用区显示名称 '可用区B' 映射到实际AWS可用区ID 'cn-north-1b'
2025/03/13 17:34:02 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-north-1-b, CIDR=10.0.0.0/24, 可用区=可用区B
2025/03/13 17:34:02 [INFO] Terraform配置已保存到: terraform/deployments/1741858442/main.tf
2025/03/13 17:34:02 [INFO] Terraform配置文件已保存到: terraform/deployments/1741858442/main.tf
2025/03/13 17:34:02 [INFO] 开始初始化Terraform
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 17:34:47","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["914"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 17:34:47"}
2025/03/13 17:34:47 [INFO] 收到新的部署请求
2025/03/13 17:34:47 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-north-1","az":"可用区C","vpc":{"name":"AWS-VPC-cn-north-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-north-1-c","cidr":"10.0.0.0/24","az":"cn-north-1-c","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-north-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-north-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-north-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-north-1-c\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-north-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-north-1-c\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-north-1-c\"\n  }\n}\n\n"}
2025/03/13 17:34:47 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区C",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-c",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 17:34:47 [INFO] 开始异步处理部署，部署ID: 1741858487
2025/03/13 17:34:47 [INFO] 已返回部署开始响应，部署ID: 1741858487
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 17:34:47"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":569651,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 17:34:47"}
2025/03/13 17:34:47 [INFO] 开始处理部署 ID: 1741858487
2025/03/13 17:34:47 [INFO] 创建部署工作目录: terraform/deployments/1741858487
2025/03/13 17:34:47 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 17:34:47 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-north-1",
  "az": "可用区C",
  "vpc": {
    "name": "AWS-VPC-cn-north-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-north-1-c",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 17:34:47 [INFO] 已生成云提供商配置: aws, 区域: cn-north-1
2025/03/13 17:34:47 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-north-1, CIDR=10.0.0.0/16
2025/03/13 17:34:47 [INFO] 将可用区显示名称 '可用区C' 映射到实际AWS可用区ID 'cn-north-1d'
2025/03/13 17:34:47 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-north-1-c, CIDR=10.0.0.0/24, 可用区=可用区C
2025/03/13 17:34:47 [INFO] Terraform配置已保存到: terraform/deployments/1741858487/main.tf
2025/03/13 17:34:47 [INFO] Terraform配置文件已保存到: terraform/deployments/1741858487/main.tf
2025/03/13 17:34:47 [INFO] 开始初始化Terraform
{"client_ip":"124.193.176.86","file":"/root/aaa/backend/main.go:43","func":"main.RequestLoggerMiddleware.func1","level":"info","method":"POST","msg":"收到API请求","path":"/api/deploy","request_id":"","time":"2025-03-13 17:35:18","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"}
{"file":"/root/aaa/backend/main.go:276","func":"main.main.func1","level":"info","msg":"收到跨域请求","origin":"http://101.126.135.198","request_headers":{"Accept":["*/*"],"Accept-Encoding":["gzip, deflate"],"Accept-Language":["zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"],"Connection":["close"],"Content-Length":["958"],"Content-Type":["application/json"],"Origin":["http://101.126.135.198"],"Priority":["u=0"],"Referer":["http://101.126.135.198/"],"User-Agent":["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0"],"X-Forwarded-For":["124.193.176.86"],"X-Forwarded-Proto":["http"],"X-Real-Ip":["124.193.176.86"]},"request_method":"POST","request_path":"/api/deploy","time":"2025-03-13 17:35:18"}
2025/03/13 17:35:18 [INFO] 收到新的部署请求
2025/03/13 17:35:18 [INFO] 收到前端传送的原始参数:
{"cloudProvider":"aws","region":"cn-northwest-1","az":"可用区A","vpc":{"name":"AWS-VPC-cn-northwest-1","cidr":"10.0.0.0/16","enableDnsSupport":true,"enableDnsHostnames":true},"subnet":{"name":"AWS-Subnet-cn-northwest-1-a","cidr":"10.0.0.0/24","az":"cn-northwest-1-a","mapPublicIpOnLaunch":true},"components":[],"componentProperties":{},"terraformPreview":"provider \"aws\" {\n  region = \"cn-northwest-1\"\n}\n\nresource \"aws_vpc\" \"AWS-VPC-cn-northwest-1\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  \n  tags = {\n    Name = \"AWS-VPC-cn-northwest-1\"\n  }\n}\n\nresource \"aws_subnet\" \"AWS-Subnet-cn-northwest-1-a\" {\n  vpc_id                  = aws_vpc.AWS-VPC-cn-northwest-1.id\n  cidr_block              = \"10.0.0.0/24\"\n  availability_zone       = \"cn-northwest-1-a\"\n  map_public_ip_on_launch = true\n  \n  tags = {\n    Name = \"AWS-Subnet-cn-northwest-1-a\"\n  }\n}\n\n"}
2025/03/13 17:35:18 [INFO] 解析后的部署配置:
{
  "cloudProvider": "aws",
  "region": "cn-northwest-1",
  "az": "可用区A",
  "vpc": {
    "name": "AWS-VPC-cn-northwest-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-northwest-1-a",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 17:35:18 [INFO] 开始异步处理部署，部署ID: 1741858518
2025/03/13 17:35:18 [INFO] 已返回部署开始响应，部署ID: 1741858518
{"file":"/root/aaa/backend/main.go:306","func":"main.main.func1","level":"info","msg":"CORS请求处理完成","request_path":"/api/deploy","response_headers":{"Access-Control-Allow-Credentials":["true"],"Access-Control-Allow-Headers":["Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Request-ID"],"Access-Control-Allow-Methods":["GET, POST, PUT, DELETE, OPTIONS, HEAD"],"Access-Control-Allow-Origin":["http://101.126.135.198"],"Access-Control-Max-Age":["86400"],"Content-Type":["application/json; charset=utf-8"]},"response_status":200,"time":"2025-03-13 17:35:18"}
{"error_count":0,"file":"/root/aaa/backend/main.go:59","func":"main.RequestLoggerMiddleware.func1","latency":1120780,"level":"info","method":"POST","msg":"API请求完成","path":"/api/deploy","status":200,"time":"2025-03-13 17:35:18"}
2025/03/13 17:35:18 [INFO] 开始处理部署 ID: 1741858518
2025/03/13 17:35:18 [INFO] 创建部署工作目录: terraform/deployments/1741858518
2025/03/13 17:35:18 [INFO] 开始为云提供商 aws 生成Terraform配置
2025/03/13 17:35:18 [INFO] 部署配置详情:
{
  "cloudProvider": "aws",
  "region": "cn-northwest-1",
  "az": "可用区A",
  "vpc": {
    "name": "AWS-VPC-cn-northwest-1",
    "cidr": "10.0.0.0/16",
    "enableDnsSupport": true,
    "enableDnsHostnames": true
  },
  "subnet": {
    "name": "AWS-Subnet-cn-northwest-1-a",
    "cidr": "10.0.0.0/24",
    "mapPublicIpOnLaunch": true
  },
  "components": [],
  "componentProperties": {}
}
2025/03/13 17:35:18 [INFO] 已生成云提供商配置: aws, 区域: cn-northwest-1
2025/03/13 17:35:18 [INFO] 已生成VPC配置: 名称=AWS-VPC-cn-northwest-1, CIDR=10.0.0.0/16
2025/03/13 17:35:18 [INFO] 将可用区显示名称 '可用区A' 映射到实际AWS可用区ID 'cn-northwest-1a'
2025/03/13 17:35:18 [INFO] 已生成子网配置: 名称=AWS-Subnet-cn-northwest-1-a, CIDR=10.0.0.0/24, 可用区=可用区A
2025/03/13 17:35:18 [INFO] Terraform配置已保存到: terraform/deployments/1741858518/main.tf
2025/03/13 17:35:18 [INFO] Terraform配置文件已保存到: terraform/deployments/1741858518/main.tf
2025/03/13 17:35:18 [INFO] 开始初始化Terraform
2025/03/13 17:35:25 [INFO] Terraform初始化完成，输出:
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
- Installed hashicorp/aws v5.90.1 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2025/03/13 17:35:25 [INFO] 开始验证Terraform配置
2025/03/13 17:35:27 [INFO] Terraform配置验证通过，输出:
[32m[1mSuccess![0m The configuration is valid.
[0m
2025/03/13 17:35:27 [INFO] 开始生成Terraform执行计划
2025/03/13 17:35:30 [INFO] Terraform执行计划生成完成，输出:

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_subnet.AWS-Subnet-cn-north-1-b[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "AWS-Subnet-cn-north-1-b" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "cn-north-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-b"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-b"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.AWS-VPC-cn-north-1[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "AWS-VPC-cn-north-1" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
2025/03/13 17:35:30 [INFO] 开始执行Terraform部署
2025/03/13 17:35:58 [INFO] Terraform部署执行完成，输出:
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 14s [id=vpc-01dffd47f0d21799a][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-b: Creating...[0m[0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-b: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-b: Creation complete after 11s [id=subnet-01ca90ee851a2ac3e][0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
[0m
2025/03/13 17:35:58 [INFO] 开始生成资源拓扑图
2025/03/13 17:35:58 [INFO] 部署完成，更新最终状态
2025/03/13 17:35:58 [INFO] 部署 ID: 1741858442 已成功完成
2025/03/13 17:36:33 [INFO] Terraform初始化完成，输出:
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
- Installed hashicorp/aws v5.90.1 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2025/03/13 17:36:33 [INFO] 开始验证Terraform配置
2025/03/13 17:36:36 [INFO] Terraform配置验证通过，输出:
[32m[1mSuccess![0m The configuration is valid.
[0m
2025/03/13 17:36:36 [INFO] 开始生成Terraform执行计划
2025/03/13 17:36:41 [INFO] Terraform执行计划生成完成，输出:

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_subnet.AWS-Subnet-cn-north-1-c[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "AWS-Subnet-cn-north-1-c" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "cn-north-1d"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-c"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-north-1-c"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.AWS-VPC-cn-north-1[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "AWS-VPC-cn-north-1" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-north-1"
        }
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
2025/03/13 17:36:41 [INFO] 开始执行Terraform部署
2025/03/13 17:37:06 [INFO] Terraform部署执行完成，输出:
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-north-1: Creation complete after 12s [id=vpc-0499a7005ac9027e3][0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-c: Creating...[0m[0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-c: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.AWS-Subnet-cn-north-1-c: Creation complete after 11s [id=subnet-02256614f4000a546][0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
[0m
2025/03/13 17:37:06 [INFO] 开始生成资源拓扑图
2025/03/13 17:37:06 [INFO] 部署完成，更新最终状态
2025/03/13 17:37:06 [INFO] 部署 ID: 1741858487 已成功完成
2025/03/13 17:42:19 [ERROR] Terraform初始化失败: exit status 1, 输出: [0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mFailed to install provider[0m
[31m│[0m [0m
[31m│[0m [0m[0mError while installing hashicorp/aws v5.90.1: releases.hashicorp.com: read
[31m│[0m [0mtcp 10.168.0.5:52070->3.165.39.26:443: read: connection reset by peer
[31m╵[0m[0m
2025/03/13 17:42:19 [ERROR] 部署操作失败: Terraform初始化失败: exit status 1, 输出: [0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mFailed to install provider[0m
[31m│[0m [0m
[31m│[0m [0m[0mError while installing hashicorp/aws v5.90.1: releases.hashicorp.com: read
[31m│[0m [0mtcp 10.168.0.5:52070->3.165.39.26:443: read: connection reset by peer
[31m╵[0m[0m
2025/03/13 17:42:19 [ERROR] 部署过程崩溃: Terraform初始化失败: exit status 1, 输出: [0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mFailed to install provider[0m
[31m│[0m [0m
[31m│[0m [0m[0mError while installing hashicorp/aws v5.90.1: releases.hashicorp.com: read
[31m│[0m [0mtcp 10.168.0.5:52070->3.165.39.26:443: read: connection reset by peer
[31m╵[0m[0m
2025/03/13 17:52:47 [INFO] Terraform初始化完成，输出:
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.90.1...
- Installed hashicorp/aws v5.90.1 (signed by HashiCorp)
Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2025/03/13 17:52:47 [INFO] 开始验证Terraform配置
2025/03/13 17:52:49 [INFO] Terraform配置验证通过，输出:
[32m[1mSuccess![0m The configuration is valid.
[0m
2025/03/13 17:52:49 [INFO] 开始生成Terraform执行计划
2025/03/13 17:52:52 [INFO] Terraform执行计划生成完成，输出:

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_subnet.AWS-Subnet-cn-northwest-1-a[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "AWS-Subnet-cn-northwest-1-a" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "cn-northwest-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-northwest-1-a"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "AWS-Subnet-cn-northwest-1-a"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.AWS-VPC-cn-northwest-1[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "AWS-VPC-cn-northwest-1" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-northwest-1"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "AWS-VPC-cn-northwest-1"
        }
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
2025/03/13 17:52:52 [INFO] 开始执行Terraform部署
2025/03/13 17:53:18 [INFO] Terraform部署执行完成，输出:
[0m[1maws_vpc.AWS-VPC-cn-northwest-1: Creating...[0m[0m
[0m[1maws_vpc.AWS-VPC-cn-northwest-1: Still creating... [10s elapsed][0m[0m
[0m[1maws_vpc.AWS-VPC-cn-northwest-1: Creation complete after 12s [id=vpc-0c09fa179c8d7e91e][0m
[0m[1maws_subnet.AWS-Subnet-cn-northwest-1-a: Creating...[0m[0m
[0m[1maws_subnet.AWS-Subnet-cn-northwest-1-a: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.AWS-Subnet-cn-northwest-1-a: Creation complete after 11s [id=subnet-0bdfb28c100d34275][0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
[0m
2025/03/13 17:53:18 [INFO] 开始生成资源拓扑图
2025/03/13 17:53:18 [INFO] 部署完成，更新最终状态
2025/03/13 17:53:18 [INFO] 部署 ID: 1741858518 已成功完成
